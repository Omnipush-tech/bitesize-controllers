/*
Copyright 2018 Pearson Technology

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.com/pearsontechnology/bitesize-controllers/vault-controller/pkg/apis/vault.local/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VaultPolicyLister helps list VaultPolicies.
type VaultPolicyLister interface {
	// List lists all VaultPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1.VaultPolicy, err error)
	// Get retrieves the VaultPolicy from the index for a given name.
	Get(name string) (*v1.VaultPolicy, error)
	VaultPolicyListerExpansion
}

// vaultpolicyLister implements the VaultPolicyLister interface.
type vaultpolicyLister struct {
	indexer cache.Indexer
}

// NewVaultPolicyLister returns a new VaultPolicyLister.
func NewVaultPolicyLister(indexer cache.Indexer) VaultPolicyLister {
	return &vaultpolicyLister{indexer: indexer}
}

// List lists all VaultPolicies in the indexer.
func (s *vaultpolicyLister) List(selector labels.Selector) (ret []*v1.VaultPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VaultPolicy))
	})
	return ret, err
}

// Get retrieves the VaultPolicy from the index for a given name.
func (s *vaultpolicyLister) Get(name string) (*v1.VaultPolicy, error) {
	key := &v1.VaultPolicy{ObjectMeta: meta_v1.ObjectMeta{Name: name}}
	obj, exists, err := s.indexer.Get(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("vaultpolicy"), name)
	}
	return obj.(*v1.VaultPolicy), nil
}
